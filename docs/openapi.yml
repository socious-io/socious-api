openapi: 3.0.0
info:
  title: Socious-API
  version: 2.2.6
servers:
  - url: https://dev.socious.io/api/v2/
  - url: https://socious.io/api/v2/
  - url: http://localhost:8370
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Answers:
      properties:
        answer:
          type: string
        applicants:
          $ref: '#/components/schemas/Applicants'
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        projects:
          $ref: '#/components/schemas/Projects'
        question:
          $ref: '#/components/schemas/Questions'
        selectedOption:
          type: number
        updatedAt:
          format: date-time
          type: string
      required:
        - answer
        - applicants
        - createdAt
        - id
        - projects
        - question
        - selectedOption
        - updatedAt
      type: object
    Applicants:
      properties:
        answers:
          items:
            $ref: '#/components/schemas/Answers'
          type: array
        attachment:
          $ref: '#/components/schemas/Media'
        closedAt:
          format: date-time
          type: string
        coverLetter:
          type: string
        createdAt:
          format: date-time
          type: string
        cvLink:
          type: string
        cvName:
          type: string
        deletedAt:
          format: date-time
          type: string
        feedback:
          type: string
        id:
          type: string
        missions:
          items:
            $ref: '#/components/schemas/Missions'
          type: array
        offerMessage:
          type: string
        offerRate:
          type: number
        offers:
          items:
            $ref: '#/components/schemas/Offers'
          type: array
        oldId:
          type: number
        paymentRate:
          type: number
        paymentType:
          enum:
            - PAID
            - VOLUNTEER
          type: string
        projectId:
          type: string
        projects:
          $ref: '#/components/schemas/Projects'
        shareContactInfo:
          type: boolean
        status:
          enum:
            - APPROVED
            - CLOSED
            - HIRED
            - OFFERED
            - PENDING
            - REJECTED
            - WITHDRAWN
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          type: string
        users:
          $ref: '#/components/schemas/Users'
      required:
        - answers
        - attachment
        - closedAt
        - coverLetter
        - createdAt
        - cvLink
        - cvName
        - deletedAt
        - feedback
        - id
        - missions
        - offerMessage
        - offerRate
        - offers
        - oldId
        - paymentRate
        - paymentType
        - projectId
        - projects
        - shareContactInfo
        - status
        - updatedAt
        - userId
        - users
      type: object
    Cards:
      properties:
        brand:
          type: string
        createdAt:
          format: date-time
          type: string
        cvc:
          type: string
        expMonth:
          type: number
        expYear:
          type: number
        holderName:
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        numbers:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - brand
        - createdAt
        - cvc
        - expMonth
        - expYear
        - holderName
        - id
        - identity
        - numbers
        - updatedAt
      type: object
    Chats:
      properties:
        chatsParticipants:
          items:
            $ref: '#/components/schemas/ChatsParticipants'
          type: array
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        deletedAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/Messages'
          type: array
        name:
          type: string
        oldId:
          type: number
        participants:
          items:
            type: string
          type: array
        type:
          enum:
            - CHANNEL
            - CHAT
            - GROUPED
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - chatsParticipants
        - createdAt
        - createdBy
        - deletedAt
        - description
        - id
        - messages
        - name
        - oldId
        - participants
        - type
        - updatedAt
      type: object
    ChatsParticipants:
      properties:
        allRead:
          type: boolean
        chat:
          $ref: '#/components/schemas/Chats'
        chatId:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        identityId:
          type: string
        joinedBy:
          $ref: '#/components/schemas/Identities'
        lastReadAt:
          format: date-time
          type: string
        lastReadId:
          type: string
        mutedUntil:
          format: date-time
          type: string
        type:
          enum:
            - ADMIN
            - MEMBER
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - allRead
        - chat
        - chatId
        - createdAt
        - id
        - identity
        - identityId
        - joinedBy
        - lastReadAt
        - lastReadId
        - mutedUntil
        - type
        - updatedAt
      type: object
    CollectorJobs:
      properties:
        createdAt:
          format: date-time
          type: string
        fetchCounter:
          type: number
        hasMore:
          type: boolean
        id:
          type: string
        jobName:
          type: string
        lastModifiedDate:
          format: date-time
          type: string
        service:
          enum:
            - IDEALIST
            - RELIEFWEB
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - createdAt
        - fetchCounter
        - hasMore
        - id
        - jobName
        - lastModifiedDate
        - service
        - updatedAt
      type: object
    Comments:
      properties:
        comments:
          items:
            $ref: '#/components/schemas/Comments'
          type: array
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        likes:
          type: number
        likes2:
          items:
            $ref: '#/components/schemas/Likes'
          type: array
        posts:
          $ref: '#/components/schemas/Posts'
        replied:
          type: boolean
        reports:
          $ref: '#/components/schemas/Reports'
        updatedAt:
          format: date-time
          type: string
      required:
        - comments
        - content
        - createdAt
        - id
        - identity
        - likes
        - likes2
        - posts
        - replied
        - reports
        - updatedAt
      type: object
    Connections:
      properties:
        connectedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        relationId:
          type: string
        requested:
          $ref: '#/components/schemas/Identities'
        requester:
          $ref: '#/components/schemas/Identities'
        status:
          enum:
            - BLOCKED
            - CONNECTED
            - PENDING
          type: string
        text:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - connectedAt
        - createdAt
        - id
        - relationId
        - requested
        - requester
        - status
        - text
        - updatedAt
      type: object
    Devices:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        meta:
          additionalProperties: true
          properties: {}
          type: object
        token:
          type: string
        users:
          $ref: '#/components/schemas/Users'
      required:
        - createdAt
        - id
        - meta
        - token
        - users
      type: object
    Emails:
      properties:
        body:
          type: string
        bodyType:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        info:
          additionalProperties: true
          properties: {}
          type: object
        options:
          additionalProperties: true
          properties: {}
          type: object
        service:
          enum:
            - SENDGRID
            - SMTP
            - TEST
          type: string
        subject:
          type: string
        to:
          type: string
      required:
        - body
        - bodyType
        - createdAt
        - id
        - info
        - options
        - service
        - subject
        - to
      type: object
    Escrows:
      properties:
        amount:
          type: number
        createdAt:
          format: date-time
          type: string
        currency:
          enum:
            - ARS
            - AUD
            - BDT
            - BRL
            - CAD
            - CHF
            - CLP
            - COP
            - CRC
            - DKK
            - DOP
            - EGP
            - EUR
            - GBP
            - GHS
            - GTQ
            - INR
            - JPY
            - KRW
            - MXN
            - NPR
            - PEN
            - RWF
            - THB
            - USD
            - UYU
            - ZAR
          type: string
        id:
          type: string
        missions:
          $ref: '#/components/schemas/Missions'
        offers:
          $ref: '#/components/schemas/Offers'
        payment:
          $ref: '#/components/schemas/Payments'
        projects:
          $ref: '#/components/schemas/Projects'
        refoundAt:
          format: date-time
          type: string
        releaseId:
          type: string
        releasedAt:
          format: date-time
          type: string
      required:
        - amount
        - createdAt
        - currency
        - id
        - missions
        - offers
        - payment
        - projects
        - refoundAt
        - releaseId
        - releasedAt
      type: object
    Experiences:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        endAt:
          format: date-time
          type: string
        id:
          type: string
        organizations:
          $ref: '#/components/schemas/Organizations'
        skills:
          items:
            type: string
          type: array
        startAt:
          format: date-time
          type: string
        title:
          type: string
        users:
          $ref: '#/components/schemas/Users'
      required:
        - createdAt
        - description
        - endAt
        - id
        - organizations
        - skills
        - startAt
        - title
        - users
      type: object
    Feedbacks:
      properties:
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        isContest:
          type: boolean
        missions:
          $ref: '#/components/schemas/Missions'
        projects:
          $ref: '#/components/schemas/Projects'
      required:
        - content
        - createdAt
        - id
        - identity
        - isContest
        - missions
        - projects
      type: object
    Follows:
      properties:
        createdAt:
          format: date-time
          type: string
        followerIdentity:
          $ref: '#/components/schemas/Identities'
        followerIdentityId:
          type: string
        followingIdentity:
          $ref: '#/components/schemas/Identities'
        followingIdentityId:
          type: string
        id:
          type: string
      required:
        - createdAt
        - followerIdentity
        - followerIdentityId
        - followingIdentity
        - followingIdentityId
        - id
      type: object
    Geonames:
      properties:
        admin1Code:
          type: string
        admin2Code:
          type: string
        asciiname:
          type: string
        cc2:
          items:
            type: string
          type: array
        countryCode:
          type: string
        createdAt:
          format: date-time
          type: string
        featureClass:
          type: string
        featureCode:
          type: string
        fipsCode:
          type: string
        geonamesAlts:
          items:
            $ref: '#/components/schemas/GeonamesAlt'
          type: array
        id:
          type: number
        isoCode:
          type: string
        latlong:
          anyOf:
            - additionalProperties: true
              properties: {}
              type: object
            - type: string
        name:
          type: string
        organizations:
          items:
            $ref: '#/components/schemas/Organizations'
          type: array
        population:
          type: number
        projects:
          items:
            $ref: '#/components/schemas/Projects'
          type: array
        timezone:
          type: string
        updatedAt:
          type: string
        users:
          items:
            $ref: '#/components/schemas/Users'
          type: array
      required:
        - admin1Code
        - admin2Code
        - asciiname
        - cc2
        - countryCode
        - createdAt
        - featureClass
        - featureCode
        - fipsCode
        - geonamesAlts
        - id
        - isoCode
        - latlong
        - name
        - organizations
        - population
        - projects
        - timezone
        - updatedAt
        - users
      type: object
    GeonamesAlt:
      properties:
        alternateName:
          type: string
        geoname:
          $ref: '#/components/schemas/Geonames'
        id:
          type: number
        isColloquial:
          type: boolean
        isHistoric:
          type: boolean
        isPreferredName:
          type: boolean
        isShortName:
          type: boolean
        isoLanguage:
          type: string
      required:
        - alternateName
        - geoname
        - id
        - isColloquial
        - isHistoric
        - isPreferredName
        - isShortName
        - isoLanguage
      type: object
    Identities:
      properties:
        createdAt:
          format: date-time
          type: string
        meta:
          additionalProperties: true
          properties: {}
          type: object
        type:
          enum:
            - organizations
            - users
          type: string
      required:
        - cards
        - chatsParticipants
        - chatsParticipants2
        - comments
        - connections
        - connections2
        - createdAt
        - feedbacks
        - follows
        - follows2
        - id
        - impactPointsHistories
        - likes
        - media
        - messages
        - meta
        - missions
        - missions2
        - oauthConnects
        - offers
        - offers2
        - payments
        - posts
        - projects
        - searchHistories
        - type
      type: object
    ImpactPointsHistory:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        missions:
          $ref: '#/components/schemas/Missions'
        socialCause:
          enum:
            - ABORTION
            - ANIMAL_RIGHTS
            - ANTI_SEMITISM
            - ARMED_CONFLICT
            - BIODIVERSITY
            - BIODIVERSITY_LIFE_BELOW_WATER
            - BLACK_LIVES_MATTER
            - BULLYING
            - CHILD_PROTECTION
            - CIVIC_ENGAGEMENT
            - CLIMATE_CHANGE
            - COLLABORATION_FOR_IMPACT
            - COMMUNITY_DEVELOPMENT
            - CORRUPTION
            - CRIME_PREVENTION
            - DECENT_WORK
            - DEMOCRACY
            - DEPOPULATION
            - DISABILITY
            - DIVERSITY_INCLUSION
            - DOMESTIC_VIOLENCE
            - EDUCATION
            - EUTHANASIA
            - GENDER_BASED_VIOLENCE
            - GENDER_EQUALITY
            - GOVERNANCE
            - HEALTH
            - HOMELESSNESS
            - HUMAN_RIGHTS
            - HUNGER
            - INDIGENOUS_PEOPLES
            - INEQUALITY
            - INNOVATION
            - ISLAMOPHOBIA
            - JUSTICE
            - LGBTQI
            - MENTAL
            - MIGRANTS
            - MINORITY
            - MULTICULTURALISM
            - NATURAL_DISASTERS
            - NEURODIVERSITY
            - ORPHANS
            - OTHER
            - OVERPOPULATION
            - PEACEBUILDING
            - PEACE_JUSTICE
            - POVERTY
            - REFUGEE
            - RESPONSIBLE_CONSUMPTION
            - RURAL_DEVELOPMENT
            - SECURITY
            - SEXUAL_VIOLENCE
            - SOCIAL
            - SUBSTANCE_ABUSE
            - SUSTAINABILITY
            - SUSTAINABLE_COMMUNITIES
            - SUSTAINABLE_ENERGY
            - VEGANISM
            - WATER_SANITATION
          type: string
        socialCauseCategory:
          enum:
            - CLEAN_WATER_SANITATION
            - CLIMATE_ACTION
            - ECONOMIC_GROWTH
            - EDUCATION_QUALITY
            - ENERGY
            - GENDER_EQUALITY
            - GOALS_PARTNERSHIPS
            - HEALTH
            - INDUSTRY_INNOVATION_INFRASTRUCTURE
            - LIFE
            - LIFE_BELOW_WATER
            - NO_POVERTY
            - PEACE_JUSTICE
            - REDUCED_INEQUALITIES
            - RESPONSIBLE_CONSUMPTION_PRODUCTION
            - SUSTAINABLE_CITIES_COMMUNITIES
            - ZERO_HUNGER
          type: string
        submittedWork:
          $ref: '#/components/schemas/SubmittedWorks'
        totalPoints:
          type: number
      required:
        - createdAt
        - id
        - identity
        - missions
        - socialCause
        - socialCauseCategory
        - submittedWork
        - totalPoints
      type: object
    JobCategories:
      properties:
        createdAt:
          format: date-time
          type: string
        hourlyWageDollars:
          type: number
        id:
          type: string
        name:
          type: string
        projects:
          items:
            $ref: '#/components/schemas/Projects'
          type: array
        updatedAt:
          format: date-time
          type: string
      required:
        - createdAt
        - hourlyWageDollars
        - id
        - name
        - projects
        - updatedAt
      type: object
    Languages:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        level:
          enum:
            - BASIC
            - CONVERSANT
            - FLUENT
            - NATIVE
            - PROFICIENT
          type: string
        name:
          type: string
        users:
          $ref: '#/components/schemas/Users'
      required:
        - createdAt
        - id
        - level
        - name
        - users
      type: object
    Likes:
      properties:
        commentId:
          type: string
        comments:
          $ref: '#/components/schemas/Comments'
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        identityId:
          type: string
        postId:
          type: string
        posts:
          $ref: '#/components/schemas/Posts'
      required:
        - commentId
        - comments
        - createdAt
        - id
        - identity
        - identityId
        - postId
        - posts
      type: object
    Media:
      properties:
        applicants:
          items:
            $ref: '#/components/schemas/Applicants'
          type: array
        createdAt:
          format: date-time
          type: string
        filename:
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        messages:
          items:
            $ref: '#/components/schemas/Messages'
          type: array
        organizations:
          items:
            $ref: '#/components/schemas/Organizations'
          type: array
        organizations2:
          items:
            $ref: '#/components/schemas/Organizations'
          type: array
        url:
          type: string
        users:
          items:
            $ref: '#/components/schemas/Users'
          type: array
        users2:
          items:
            $ref: '#/components/schemas/Users'
          type: array
      required:
        - applicants
        - createdAt
        - filename
        - id
        - identity
        - messages
        - organizations
        - organizations2
        - url
        - users
        - users2
      type: object
    Messages:
      properties:
        chat:
          $ref: '#/components/schemas/Chats'
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        media:
          $ref: '#/components/schemas/Media'
        replied:
          type: boolean
        replyId:
          type: string
        text:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - chat
        - createdAt
        - deletedAt
        - id
        - identity
        - media
        - replied
        - replyId
        - text
        - updatedAt
      type: object
    Missions:
      properties:
        applicants:
          $ref: '#/components/schemas/Applicants'
        assignee:
          $ref: '#/components/schemas/Identities'
        assigneeId:
          type: string
        assigner:
          $ref: '#/components/schemas/Identities'
        completeAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        escrows:
          items:
            $ref: '#/components/schemas/Escrows'
          type: array
        feedbacks:
          items:
            $ref: '#/components/schemas/Feedbacks'
          type: array
        id:
          type: string
        impactPointsHistories:
          items:
            $ref: '#/components/schemas/ImpactPointsHistory'
          type: array
        offers:
          $ref: '#/components/schemas/Offers'
        projectId:
          type: string
        projects:
          $ref: '#/components/schemas/Projects'
        status:
          enum:
            - ACTIVE
            - CANCELED
            - COMPLETE
            - CONFIRMED
            - KICKED_OUT
          type: string
        submittedWorks:
          items:
            $ref: '#/components/schemas/SubmittedWorks'
          type: array
        updatedAt:
          format: date-time
          type: string
      required:
        - applicants
        - assignee
        - assigneeId
        - assigner
        - completeAt
        - createdAt
        - escrows
        - feedbacks
        - id
        - impactPointsHistories
        - offers
        - projectId
        - projects
        - status
        - submittedWorks
        - updatedAt
      type: object
    Notifications:
      properties:
        createdAt:
          format: date-time
          type: string
        data:
          additionalProperties: true
          properties: {}
          type: object
        id:
          type: string
        readAt:
          format: date-time
          type: string
        refId:
          type: string
        silent:
          type: boolean
        type:
          enum:
            - ACCEPT_CONNECT
            - APPLICATION
            - APPROVED
            - ASSIGNEE_CANCELED
            - ASSIGNER_CANCELED
            - ASSIGNER_CONFIRMED
            - CHAT
            - COMMENT
            - COMMENT_LIKE
            - CONNECT
            - EMPLOYEE_CANCELED
            - EMPLOYER_CANCELED
            - EMPLOYER_CONFIRMED
            - FOLLOWED
            - HIRED
            - MEMBERED
            - OFFER
            - POST_LIKE
            - PROJECT_COMPLETE
            - REJECT
            - SHARE_POST
            - SHARE_PROJECT
          type: string
        updatedAt:
          format: date-time
          type: string
        users:
          $ref: '#/components/schemas/Users'
        viewAt:
          format: date-time
          type: string
      required:
        - createdAt
        - data
        - id
        - readAt
        - refId
        - silent
        - type
        - updatedAt
        - users
        - viewAt
      type: object
    NotificationsSettings:
      properties:
        createdAt:
          format: date-time
          type: string
        email:
          type: boolean
        id:
          type: string
        inApp:
          type: boolean
        push:
          type: boolean
        type:
          enum:
            - ACCEPT_CONNECT
            - APPLICATION
            - APPROVED
            - ASSIGNEE_CANCELED
            - ASSIGNER_CANCELED
            - ASSIGNER_CONFIRMED
            - CHAT
            - COMMENT
            - COMMENT_LIKE
            - CONNECT
            - EMPLOYEE_CANCELED
            - EMPLOYER_CANCELED
            - EMPLOYER_CONFIRMED
            - FOLLOWED
            - HIRED
            - MEMBERED
            - OFFER
            - POST_LIKE
            - PROJECT_COMPLETE
            - REJECT
            - SHARE_POST
            - SHARE_PROJECT
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          type: string
      required:
        - createdAt
        - email
        - id
        - inApp
        - push
        - type
        - updatedAt
        - userId
      type: object
    OauthConnects:
      properties:
        accessToken:
          type: string
        createdAt:
          format: date-time
          type: string
        expiredAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        identityId:
          type: string
        matrixUniqueId:
          type: string
        meta:
          additionalProperties: true
          properties: {}
          type: object
        provider:
          const: STRIPE
          type: string
        refreshToken:
          type: string
        status:
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPEND
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - accessToken
        - createdAt
        - expiredAt
        - id
        - identity
        - identityId
        - matrixUniqueId
        - meta
        - provider
        - refreshToken
        - status
        - updatedAt
      type: object
    Offers:
      properties:
        applicants:
          $ref: '#/components/schemas/Applicants'
        assignmentTotal:
          type: number
        createdAt:
          format: date-time
          type: string
        cryptoCurrencyAddress:
          type: string
        dueDate:
          format: date-time
          type: string
        escrows:
          items:
            $ref: '#/components/schemas/Escrows'
          type: array
        id:
          type: string
        missions:
          items:
            $ref: '#/components/schemas/Missions'
          type: array
        offerMessage:
          type: string
        offerRate:
          type: number
        offerer:
          $ref: '#/components/schemas/Identities'
        paymentMode:
          enum:
            - CRYPTO
            - FIAT
          type: string
        projects:
          $ref: '#/components/schemas/Projects'
        recipient:
          $ref: '#/components/schemas/Identities'
        status:
          enum:
            - APPROVED
            - CANCELED
            - CLOSED
            - HIRED
            - PENDING
            - WITHDRAWN
          type: string
        totalHours:
          type: number
        updatedAt:
          format: date-time
          type: string
        weeklyLimit:
          type: number
      required:
        - applicants
        - assignmentTotal
        - createdAt
        - cryptoCurrencyAddress
        - dueDate
        - escrows
        - id
        - missions
        - offerMessage
        - offerRate
        - offerer
        - paymentMode
        - projects
        - recipient
        - status
        - totalHours
        - updatedAt
        - weeklyLimit
      type: object
    OrgMembers:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        organizations:
          $ref: '#/components/schemas/Organizations'
        users:
          $ref: '#/components/schemas/Users'
      required:
        - createdAt
        - id
        - organizations
        - users
      type: object
    Organizations:
      properties:
        address:
          type: string
        bio:
          type: string
        city:
          type: string
        country:
          type: string
        coverImage:
          $ref: '#/components/schemas/Media'
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        culture:
          type: string
        description:
          type: string
        email:
          type: string
        experiences:
          items:
            $ref: '#/components/schemas/Experiences'
          type: array
        followers:
          type: number
        followings:
          type: number
        geoname:
          $ref: '#/components/schemas/Geonames'
        id:
          type: string
        image:
          $ref: '#/components/schemas/Media'
        impactPoints:
          type: number
        mission:
          type: string
        mobileCountryCode:
          type: string
        name:
          type: string
        oldId:
          type: number
        orgMembers:
          items:
            $ref: '#/components/schemas/OrgMembers'
          type: array
        otherPartyId:
          type: string
        otherPartyTitle:
          type: string
        otherPartyUrl:
          type: string
        phone:
          type: string
        reports:
          $ref: '#/components/schemas/Reports'
        searchTsv:
          type: string
        shortname:
          type: string
        status:
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPEND
          type: string
        type:
          enum:
            - COOP
            - DEPARTMENT
            - IIF
            - INTERGOV
            - NONPROFIT
            - OTHER
            - PUBLIC
            - SOCIAL
          type: string
        updatedAt:
          format: date-time
          type: string
        verifiedImpact:
          type: boolean
        walletAddress:
          type: string
        website:
          type: string
      required:
        - address
        - bio
        - city
        - country
        - coverImage
        - createdAt
        - createdBy
        - culture
        - description
        - email
        - experiences
        - followers
        - followings
        - geoname
        - id
        - image
        - impactPoints
        - mission
        - mobileCountryCode
        - name
        - oldId
        - orgMembers
        - otherPartyId
        - otherPartyTitle
        - otherPartyUrl
        - phone
        - reports
        - searchTsv
        - shortname
        - status
        - type
        - updatedAt
        - verifiedImpact
        - walletAddress
        - website
      type: object
    Payments:
      properties:
        amount:
          type: number
        canceledAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        cryptoCurrencyAddress:
          type: string
        currency:
          enum:
            - ARS
            - AUD
            - BDT
            - BRL
            - CAD
            - CHF
            - CLP
            - COP
            - CRC
            - DKK
            - DOP
            - EGP
            - EUR
            - GBP
            - GHS
            - GTQ
            - INR
            - JPY
            - KRW
            - MXN
            - NPR
            - PEN
            - RWF
            - THB
            - USD
            - UYU
            - ZAR
          type: string
        escrows:
          items:
            $ref: '#/components/schemas/Escrows'
          type: array
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        meta:
          additionalProperties: true
          properties: {}
          type: object
        service:
          enum:
            - CRYPTO
            - STRIPE
          type: string
        source:
          type: string
        sourceType:
          enum:
            - CARD
            - CRYPTO_WALLET
          type: string
        transactionId:
          type: string
        verifiedAt:
          format: date-time
          type: string
      required:
        - amount
        - canceledAt
        - createdAt
        - cryptoCurrencyAddress
        - currency
        - escrows
        - id
        - identity
        - meta
        - service
        - source
        - sourceType
        - transactionId
        - verifiedAt
      type: object
    Posts:
      properties:
        comments:
          items:
            $ref: '#/components/schemas/Comments'
          type: array
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        hashtags:
          items:
            type: string
          type: array
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        identityTags:
          items:
            type: string
          type: array
        likes:
          type: number
        likes2:
          $ref: '#/components/schemas/Likes'
        media:
          items:
            type: string
          type: array
        oldId:
          type: number
        posts:
          items:
            $ref: '#/components/schemas/Posts'
          type: array
        reports:
          $ref: '#/components/schemas/Reports'
        searchTsv:
          type: string
        shared:
          type: number
        updatedAt:
          format: date-time
          type: string
      required:
        - comments
        - content
        - createdAt
        - deletedAt
        - hashtags
        - id
        - identity
        - identityTags
        - likes
        - likes2
        - media
        - oldId
        - posts
        - reports
        - searchTsv
        - shared
        - updatedAt
      type: object
    Projects:
      properties:
        answers:
          items:
            $ref: '#/components/schemas/Answers'
          type: array
        applicants:
          $ref: '#/components/schemas/Applicants'
        city:
          type: string
        commitmentHoursHigher:
          type: string
        commitmentHoursLower:
          type: string
        country:
          type: string
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        description:
          type: string
        escrows:
          items:
            $ref: '#/components/schemas/Escrows'
          type: array
        experienceLevel:
          type: number
        expiresAt:
          format: date-time
          type: string
        feedbacks:
          items:
            $ref: '#/components/schemas/Feedbacks'
          type: array
        geoname:
          $ref: '#/components/schemas/Geonames'
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        jobCategory:
          $ref: '#/components/schemas/JobCategories'
        missions:
          items:
            $ref: '#/components/schemas/Missions'
          type: array
        offers:
          items:
            $ref: '#/components/schemas/Offers'
          type: array
        oldId:
          type: number
        otherPartyId:
          type: string
        otherPartyTitle:
          type: string
        otherPartyUrl:
          type: string
        paymentCurrency:
          type: string
        paymentRangeHigher:
          type: string
        paymentRangeLower:
          type: string
        paymentScheme:
          enum:
            - FIXED
            - HOURLY
          type: string
        paymentType:
          enum:
            - PAID
            - VOLUNTEER
          type: string
        projectLength:
          enum:
            - 1_3_MONTHS
            - 3_6_MONTHS
            - 6_MONTHS_OR_MORE
            - LESS_THAN_A_DAY
            - LESS_THAN_A_MONTH
          type: string
        projectType:
          enum:
            - FULL_TIME
            - ONE_OFF
            - PART_TIME
          type: string
        questions:
          items:
            $ref: '#/components/schemas/Questions'
          type: array
        remotePreference:
          enum:
            - HYBRID
            - ONSITE
            - REMOTE
          type: string
        searchTsv:
          type: string
        skills:
          items:
            type: string
          type: array
        status:
          enum:
            - ACTIVE
            - DRAFT
            - EXPIRE
          type: string
        submittedWorks:
          items:
            $ref: '#/components/schemas/SubmittedWorks'
          type: array
        title:
          type: string
        updatedAt:
          format: date-time
          type: string
        weeklyHoursHigher:
          type: string
        weeklyHoursLower:
          type: string
      required:
        - answers
        - applicants
        - city
        - commitmentHoursHigher
        - commitmentHoursLower
        - country
        - createdAt
        - deletedAt
        - description
        - escrows
        - experienceLevel
        - expiresAt
        - feedbacks
        - geoname
        - id
        - identity
        - jobCategory
        - missions
        - offers
        - oldId
        - otherPartyId
        - otherPartyTitle
        - otherPartyUrl
        - paymentCurrency
        - paymentRangeHigher
        - paymentRangeLower
        - paymentScheme
        - paymentType
        - projectLength
        - projectType
        - questions
        - remotePreference
        - searchTsv
        - skills
        - status
        - submittedWorks
        - title
        - updatedAt
        - weeklyHoursHigher
        - weeklyHoursLower
      type: object
    Questions:
      properties:
        answers:
          items:
            $ref: '#/components/schemas/Answers'
          type: array
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        oldId:
          type: number
        options:
          items:
            type: string
          type: array
        projects:
          $ref: '#/components/schemas/Projects'
        question:
          type: string
        required:
          type: boolean
        updatedAt:
          format: date-time
          type: string
      required:
        - answers
        - createdAt
        - id
        - oldId
        - options
        - projects
        - question
        - required
        - updatedAt
      type: object
    Reports:
      properties:
        blocked:
          type: boolean
        comment:
          type: string
        commentId:
          type: string
        comments:
          $ref: '#/components/schemas/Comments'
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        identityId:
          type: string
        orgId:
          type: string
        organizations:
          $ref: '#/components/schemas/Organizations'
        postId:
          type: string
        posts:
          $ref: '#/components/schemas/Posts'
        userId:
          type: string
        users:
          $ref: '#/components/schemas/Users'
      required:
        - blocked
        - comment
        - commentId
        - comments
        - createdAt
        - id
        - identityId
        - orgId
        - organizations
        - postId
        - posts
        - userId
        - users
      type: object
    SearchHistory:
      properties:
        body:
          additionalProperties: true
          properties: {}
          type: object
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        id:
          type: string
        identity:
          $ref: '#/components/schemas/Identities'
        updatedAt:
          format: date-time
          type: string
      required:
        - body
        - createdAt
        - deletedAt
        - id
        - identity
        - updatedAt
      type: object
    Skills:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
      required:
        - createdAt
        - id
        - name
      type: object
    SubmittedWorks:
      properties:
        createdAt:
          format: date-time
          type: string
        endAt:
          format: date-time
          type: string
        id:
          type: string
        impactPointsHistories:
          items:
            $ref: '#/components/schemas/ImpactPointsHistory'
          type: array
        missions:
          $ref: '#/components/schemas/Missions'
        projects:
          $ref: '#/components/schemas/Projects'
        startAt:
          format: date-time
          type: string
        status:
          enum:
            - CONFIRMED
            - PENDING
          type: string
        totalHours:
          type: number
      required:
        - createdAt
        - endAt
        - id
        - impactPointsHistories
        - missions
        - projects
        - startAt
        - status
        - totalHours
      type: object
    Users:
      properties:
        address:
          type: string
        applicants:
          $ref: '#/components/schemas/Applicants'
        avatar:
          $ref: '#/components/schemas/Media'
        bio:
          type: string
        certificates:
          items:
            type: string
          type: array
        city:
          type: string
        country:
          type: string
        coverImage:
          $ref: '#/components/schemas/Media'
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        descriptionSearch:
          type: string
        devices:
          items:
            $ref: '#/components/schemas/Devices'
          type: array
        educations:
          items:
            type: string
          type: array
        email:
          type: string
        emailText:
          type: string
        emailVerifiedAt:
          format: date-time
          type: string
        experiences:
          items:
            $ref: '#/components/schemas/Experiences'
          type: array
        expiryDate:
          format: date-time
          type: string
        firstName:
          type: string
        followers:
          type: number
        followings:
          type: number
        geoname:
          $ref: '#/components/schemas/Geonames'
        goals:
          type: string
        id:
          type: string
        impactPoints:
          type: number
        isAdmin:
          type: boolean
        language:
          type: string
        languages:
          items:
            $ref: '#/components/schemas/Languages'
          type: array
        lastName:
          type: string
        mission:
          type: string
        mobileCountryCode:
          type: string
        myConversation:
          type: string
        notifications:
          items:
            $ref: '#/components/schemas/Notifications'
          type: array
        oldId:
          type: number
        orgMembers:
          items:
            $ref: '#/components/schemas/OrgMembers'
          type: array
        otps:
          $ref: '#/components/schemas/Otps'
        password:
          type: string
        passwordExpired:
          type: boolean
        phone:
          type: string
        phoneVerifiedAt:
          format: date-time
          type: string
        proofspaceConnectId:
          type: string
        rememberToken:
          type: string
        reports:
          $ref: '#/components/schemas/Reports'
        searchTsv:
          type: string
        skills:
          items:
            type: string
          type: array
        status:
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPEND
          type: string
        updatedAt:
          format: date-time
          type: string
        username:
          type: string
        viewAs:
          type: number
        walletAddress:
          type: string
      required:
        - address
        - applicants
        - avatar
        - bio
        - certificates
        - city
        - country
        - coverImage
        - createdAt
        - deletedAt
        - descriptionSearch
        - devices
        - educations
        - email
        - emailText
        - emailVerifiedAt
        - experiences
        - expiryDate
        - firstName
        - followers
        - followings
        - geoname
        - goals
        - id
        - impactPoints
        - isAdmin
        - language
        - languages
        - lastName
        - mission
        - mobileCountryCode
        - myConversation
        - notifications
        - oldId
        - orgMembers
        - otps
        - password
        - passwordExpired
        - phone
        - phoneVerifiedAt
        - proofspaceConnectId
        - rememberToken
        - reports
        - searchTsv
        - skills
        - status
        - updatedAt
        - username
        - viewAs
        - walletAddress
      type: object
    project-status:
      type: string
      title: Project Status
      enum:
        - DRAFT
        - ACTIVE
        - EXPIRE
    language-level:
      type: string
      title: Language Level
      enum:
        - BASIC
        - CONVERSANT
        - PROFICIENT
        - FLUENT
        - NATIVE
    filter-operators:
      type: string
      title: Filter Operators
      enum:
        - eq
        - ne
        - lt
        - lte
        - gt
        - gte
    notification-type:
      type: string
      title: Notification Type
      enum:
        - FOLLOWED
        - COMMENT_LIKE
        - POST_LIKE
        - CHAT
        - SHARE_POST
        - SHARE_PROJECT
        - COMMENT
        - APPLICATION
        - OFFER
        - REJECT
        - APPROVED
        - HIRED
        - PROJECT_COMPLETE
        - ASSIGNEE_CANCELED
        - ASSIGNER_CANCELED
        - ASSIGNER_CONFIRMED
        - CONNECT
        - MEMBERED
    location_type:
      type: string
      title: Location Type
      description: >
        Type of location record (city, town, capital, etc)

        - PPL: a city, town, village, or other agglomeration of buildings where
        people live and work

        - PPLA: seat of a first-order administrative division (PPLC takes
        precedence over PPLA)

        - PPLA2: seat of a second-order administrative division

        - PPLA3: seat of a third-order administrative division

        - PPLA4: seat of a fourth-order administrative division

        - PPLA5: seat of a fifth-order administrative division

        - PPLC: capital of a political entity

        - PPLCH: former (historical) capital of a political entity

        - PPLF: farm village

        - PPLG: seat of government of a political entity

        - PPLL: an area similar to a locality but with a small group of
        dwellings or other buildings

        - PPLR: a populated place whose population is largely engaged in
        religious occupations

        - PPLS: cities, towns, villages, or other agglomerations of buildings
        where people live and work

        - STLMT: Israeli settlement
      enum:
        - PPL
        - PPLA
        - PPLA2
        - PPLA3
        - PPLA4
        - PPLA5
        - PPLC
        - PPLCH
        - PPLF
        - PPLG
        - PPLL
        - PPLR
        - PPLS
        - STLMT
paths:
  /site/options:
    get:
      tags:
        - site
      summary: filtering and sorting options
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/login:
    post:
      tags:
        - auth
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: '{{user_login}}'
                password: '{{user_password}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/register:
    post:
      tags:
        - auth
      summary: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                first_name: Ehsan
                last_name: Mahmoudi
                username: socious2022
                password: socious2022
                email: info_2022@socious.io
      parameters:
        - name: RefreshToken
          in: header
          schema:
            type: string
          example: '{{refresh_token}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/preregister:
    post:
      tags:
        - auth
      summary: preregister
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: socious
                email: info@socious.io
      responses:
        '200':
          description: OK
          headers:
            Vary:
              schema:
                type: string
                example: Origin
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '30'
            Date:
              schema:
                type: string
                example: Fri, 19 Aug 2022 17:20:05 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: preregister (all ok)
                  value:
                    username: null
                    email: null
                example-1:
                  summary: preregister (email only)
                  value:
                    email: null
                example-2:
                  summary: preregister (both invalid)
                  value:
                    username: >-
                      "username" with value "socious team" fails to match the
                      required pattern:
                      /^(?=.{6,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/
                    email: '"email" must be a valid email'
                example-3:
                  summary: preregister (mix of invalid and existing)
                  value:
                    username: >-
                      "username" with value "socious team" fails to match the
                      required pattern:
                      /^(?=.{6,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/
                    email: EXISTS
  /auth/otp:
    post:
      tags:
        - auth
      summary: send otp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: '{{user_login}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/otp/confirm:
    get:
      tags:
        - auth
      summary: confirm otp
      parameters:
        - name: code
          in: query
          schema:
            type: integer
          example: '207364'
        - name: email
          in: query
          schema:
            type: string
          example: info@socious.io
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/forget-password:
    post:
      tags:
        - auth
      summary: forget password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: '{{user_login}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/resend-verify-code:
    post:
      tags:
        - auth
      summary: resend verify code
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: '{{user_login}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/refresh:
    post:
      tags:
        - auth
      summary: refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                refresh_token: '{{refresh_token}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/stripe/connect-link:
    get:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: stripe connect link
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/stripe:
    post:
      tags:
        - auth
      summary: stripe connect
      description: >-
        please make sure we created 2 different link with this bottom template
        link for 2 different envirement testing (dev.socious.io) and production
        we may have same redirect path with dev.socious.io/app/.. and
        socious.io/app/...  domain but CLIENT_ID would be different on each env
        and redirect_url must be register on Stripe console
        https://connect.stripe.com/oauth/authorize?response_type=code&client_id={{CLIENT_ID}}&scope=read_write&redirect_uri=https://socious.io/app/{{STRIPE_CLIENT_REDIRECT_PATH}}
        after client complete login or register Stripe would redirect client to
        our webapp redirect_url after that client app if it was success connect
        must provide the code to BE and BE would result account id and user
        status for paying out this would help to know Stripe oauth ->
        https://stripe.com/docs/connect/oauth-reference
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                code: '{{oauth_code}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
                  account_id: '{{stripe_account_id}}'
                  status: '{{stripe_onboarding_status}}'
  /auth/stripe/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: stripe connect profile
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/categories:
    get:
      tags:
        - project
      summary: get all job categories
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects:
    get:
      tags:
        - project
      summary: get all
      parameters:
        - name: identity
          in: query
          schema:
            type: string
          description: uuid of organization to filter
          example: 2bd26aa5-f745-4f12-bca7-17916161ae8b
        - name: status
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/project-status'
            default: ACTIVE
          description: statuses to filter for
          example: ACTIVE
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - project
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: Data testing
                experience_level: 1
                payment_range_higher: '13'
                payment_range_lower: '12'
                payment_scheme: FIXED
                payment_type: VOLUNTEER
                remote_preference: HYBRID
                social_causes:
                  - SOCIAL
                  - POVERTY
                status: ACTIVE
                title: Testing
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/update/{project_id}:
    post:
      tags:
        - project
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                causes_tags:
                  - SOCIAL
                country: AL
                created_at: '2022-09-05T17:19:25.501Z'
                deleted_at: null
                description: Structure dsdsd
                experience_level: 1
                expires_at: null
                id: af8f8687-3cc9-49db-8231-4636cfb9a3a5
                identity_id: ebd02a72-f530-4d18-9a72-d7aa9ace1271
                old_id: null
                passions:
                  - SOCIAL
                payment_currency: null
                payment_range_higher: '13'
                payment_range_lower: '12'
                payment_scheme: HOURLY
                payment_type: PAID
                project_length: LESS_THAN_A_DAY
                project_type: PART_TIME
                remote_preference: HYBRID
                skills:
                  - ANGULARJS
                  - CSS
                  - AWS
                status: ACTIVE
                title: 'Sdsdsd Demo New '
                updated_at: '2022-09-05T17:19:25.501Z'
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}:
    get:
      tags:
        - project
      summary: get
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/offers:
    parameters:
      - name: project_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - project
      summary: get offers
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/applicants:
    parameters:
      - name: project_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - project
      summary: get applicants
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - project
      summary: apply
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                cover_letter: test text
                cv_link: http://test.com/cv.pdf
                cv_name: test text
                share_contact_info: true
                answers:
                  - id: 3fcc4216-0d0a-412d-9747-494e4dc8e53f
                    answer: 'yes'
                  - id: 7b9df588-50b2-4896-b343-b9f99c9b7ee1
                    selected_option: 1
                    answer: 'yes'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/missions:
    get:
      tags:
        - project
      summary: get missions
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/feedbacks:
    get:
      tags:
        - project
      summary: get feedbacks
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/questions:
    post:
      tags:
        - project
      summary: add question
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                question: are you OK ?
                required: false
                options:
                  - 'yes'
                  - 'no'
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/update/{project_id}/questions/{question_id}:
    post:
      tags:
        - project
      summary: update question
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                question: are you OK ?
                required: false
                options:
                  - 'yes'
                  - 'no'
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
        - name: question_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/remove/{project_id}/questions/{question_id}:
    post:
      tags:
        - project
      summary: remove question
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          schema:
            type: string
          required: true
        - name: question_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/offer/{user_id}:
    parameters:
      - name: project_id
        in: path
        schema:
          type: string
        required: true
      - name: user_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - project
      summary: project offer direct
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                offer_text: test offer text
                offer_rate: 500$
                due_date: '2022-08-12T11:38:03.40'
                assignment_total: 5
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applicants/{applicant_id}/offer:
    parameters:
      - name: applicant_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - project
      summary: offer to applicatons
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                offer_text: test offer text
                offer_rate: 500$
                due_date: '2022-08-12T11:38:03.40'
                assignment_total: 5
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applicants/{applicant_id}:
    parameters:
      - name: applicant_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - project
      summary: get applicant
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats:
    get:
      tags:
        - chat
      summary: all
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - chat
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: test
                description: test
                type: CHAT
                participants:
                  - bec6c278-52ea-45c6-86b8-67a711f40a00
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/summary:
    get:
      tags:
        - chat
      summary: summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/{id}:
    parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - chat
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/update/{id}:
    parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - chat
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: test1
                description: test
                type: CHAT
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/find:
    post:
      tags:
        - chat
      summary: find
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                participants:
                  - 311fca4c-057d-4752-9e7c-b985ff1c5294
      security:
        - bearerAuth: []
      parameters:
        - name: CurrentIdentity
          in: header
          schema:
            type: string
          example: d3c7223f-8ae6-4e16-9cbf-66b128dc5b74
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/{chat_id}/participants:
    get:
      tags:
        - chat
      summary: participants
      security:
        - bearerAuth: []
      parameters:
        - name: chat_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/{chat_id}/messages:
    parameters:
      - name: chat_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - chat
      summary: messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - chat
      summary: new message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                text: testttt
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/{chat_id}/messages/{message_id}:
    parameters:
      - name: chat_id
        in: path
        schema:
          type: string
        required: true
      - name: message_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - chat
      summary: reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                text: testttt reply
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - chat
      summary: replied messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/update/{chat_id}/messages/{message_id}:
    parameters:
      - name: chat_id
        in: path
        schema:
          type: string
        required: true
      - name: message_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - chat
      summary: edit messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                text: testttt edited
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/remove/{chat_id}/messages/{message_id}:
    parameters:
      - name: chat_id
        in: path
        schema:
          type: string
        required: true
      - name: message_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - chat
      summary: remove messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chats/update/{chat_id}/messages/{message_id}/read:
    post:
      tags:
        - chat
      summary: read messages
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: chat_id
          in: path
          schema:
            type: string
          required: true
        - name: message_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts:
    post:
      tags:
        - post
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
                causes_tags:
                  - SOCIAL
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - post
      summary: all
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - post
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/remove/{post_id}:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: delete
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/update/{post_id}:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content2
                causes_tags:
                  - SOCIAL
                  - HEALTH
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/report:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: report post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                comment: content2
                blocked: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/comments/{comment_id}:
    parameters:
      - name: comment_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - post
      summary: replies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/comments/{comment_id}/report:
    parameters:
      - name: comment_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: report comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                comment: content2
                blocked: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/comments:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - post
      summary: comments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - post
      summary: new comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "content": "comment reply",
                    
                }
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/comments/{comment_id}/like:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
      - name: comment_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: like comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: comment reply
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/comments/{comment_id}/unlike:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
      - name: comment_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: unlike comment
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/comments/remove/{comment_id}:
    parameters:
      - name: comment_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: delete comment
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/like:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: like
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/unlike:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: unlike
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{post_id}/share:
    parameters:
      - name: post_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - post
      summary: share
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs:
    post:
      tags:
        - organizations
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: test ORG
                email: info@socious.io
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - organizations
      summary: all
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs/{org_id}:
    parameters:
      - name: org_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - organizations
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs/update/{org_id}:
    parameters:
      - name: org_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - organizations
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                address: San Crispin
                bio: Lets beat childhood cancer
                city: San Pablo City
                country: AL
                description: San Pablo City, Laguna, Philippines
                email: jayson.vergara.ilagan@gmail.com
                mission: Asasas
                mobile_country_code: '+81'
                name: Beat childhood cancer
                phone: '9171260643'
                social_causes:
                  - SOCIAL
                website: https://asasas.com
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs/{org_id}/members:
    parameters:
      - name: org_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - organizations
      summary: members
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs/{org_id}/members/{user_id}:
    parameters:
      - name: org_id
        in: path
        schema:
          type: string
        required: true
      - name: user_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - organizations
      summary: add member
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /orgs/remove/{org_id}/members/{user_id}:
    parameters:
      - name: org_id
        in: path
        schema:
          type: string
        required: true
      - name: user_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - organizations
      summary: delete member
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/profile:
    get:
      tags:
        - users
      summary: profile
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/{user_id}/report:
    parameters:
      - name: user_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - users
      summary: report user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                comment: content2
                blocked: false
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/recommend:
    get:
      tags:
        - users
      summary: user recommend
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/update/profile:
    post:
      tags:
        - users
      summary: update profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                bio: >-
                  I’m looking right now through the code. typesetting industry.
                  Lorem Ipsum has been the industry's standard dummy text ever
                  since the 1500s, when an unknown printer took a galley of type
                  and scrambled it to make a type specimen book. It has survived
                  not only five centuries, but also the leap into electronic
                  typesetting, remaining essentially unchanged. It was
                  popularised in the 1960s with the release of Letraset sheets
                  containing Lorem Ipsum passages, and more re dfsdfgdfg Dfg
                city: San Pablo City
                country: PH
                first_name: Jayson
                last_name: Ilagan
                mission: Hdhshsh
                mobile_country_code: '+63'
                phone: '5464542'
                skills:
                  - ANGULARJS
                  - JAVASCRIPT
                  - NODE.JS
                  - REACT.JS
                  - REACT_NATIVE
                social_causes:
                  - POVERTY
                  - HEALTH
                  - CHILD_PROTECTION
                  - ANIMAL_RIGHTS
                  - DEMOCRACY
                username: socious2022
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/update/wallet:
    post:
      tags:
        - users
      summary: update user wallet address
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                wallet_address: '0x18Adf002AE3a67089E67B5765DaB67Be01C7b5ee'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/languages:
    post:
      tags:
        - users
      summary: add user language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: FA
                level: NATIVE
              properties:
                level:
                  $ref: '#/components/schemas/language-level'
                name:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/languages/update/{language_id}:
    parameters:
      - name: language_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - users
      summary: update user language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: EN
                level: PROFICIENT
              properties:
                level:
                  $ref: '#/components/schemas/language-level'
                name:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/languages/remove/{language_id}:
    parameters:
      - name: language_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - users
      summary: remove user language
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/experiences:
    post:
      tags:
        - users
      summary: add user experience
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                org_id: 0bf22f38-0c18-4762-9af8-9f36960af8cd,
                title: Test,
                description: Test,
                start_at: 2021-10-16T13:32:30.211Z,
                end_at: 2022-10-16T13:32:30.211Z,
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/experiences/update/{experience_id}:
    parameters:
      - name: experience_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - users
      summary: update user experience
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                org_id: 0bf22f38-0c18-4762-9af8-9f36960af8cd,
                title: Test,
                description: Test,
                start_at: 2021-10-16T13:32:30.211Z,
                end_at: 2022-10-16T13:32:30.211Z,
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/experiences/remove/{experience_id}:
    parameters:
      - name: experience_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - users
      summary: remove user experience
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/change-password:
    post:
      tags:
        - users
      summary: change password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                current_password: socious2022
                password: socious2023
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/change-password-direct:
    post:
      tags:
        - users
      summary: change password direct
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: socious2022
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/delete:
    post:
      tags:
        - users
      summary: delete
      description: Warning!!! this would delete user without any recovery method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                reason: test
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/{user_id}/profile:
    parameters:
      - name: user_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - users
      summary: other user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/by-username/{username}/profile:
    parameters:
      - name: username
        in: path
        schema:
          type: string
        example: seira-yun8611
        required: true
    get:
      tags:
        - users
      summary: other profile by username
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/applicants:
    get:
      tags:
        - users
      summary: get user applicants
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/offers:
    get:
      tags:
        - users
      summary: get user offers
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/missions:
    get:
      tags:
        - users
      summary: get user missions
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/badges:
    get:
      tags:
        - users
      summary: get user badges
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/impact-points:
    get:
      tags:
        - users
      summary: get user impact points history
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /identities:
    get:
      tags:
        - identity
      summary: current
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /identities/{identity_id}:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - identity
      summary: get
      security:
        - bearerAuth: []
      parameters:
        - name: CurrentIdentity
          in: header
          schema:
            type: string
          example: 2e67a3e9-7d0f-41fe-8039-38fb6928ab0c
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /identities/set/{identity_id}/session:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - identity
      summary: set identity session
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: 311fca4c-057d-4752-9e7c-b985ff1c5294
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /devices:
    post:
      tags:
        - device
      summary: add
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: >-
                  cVuYlI65SsKSH17MYEqFYi:APA91bHMxZef0CcL8oKVCRND1SONhaduVCGYOUGI8V9bwzhBzn8I3djhb0vpTmsB_zpLCcpJv8tLhV_Y6dUGNn1tUrQmuT5-MX3HjLOs7by119CeCtMvZEFleWs0881_jAIlOsZNJ80p
                meta:
                  os: ANDROID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - device
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /devices/update:
    post:
      tags:
        - device
      summary: update meta data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: >-
                  cVuYlI65SsKSH17MYEqFYi:APA91bHMxZef0CcL8oKVCRND1SONhaduVCGYOUGI8V9bwzhBzn8I3djhb0vpTmsB_zpLCcpJv8tLhV_Y6dUGNn1tUrQmuT5-MX3HjLOs7by119CeCtMvZEFleWs0881_jAIlOsZNJ80p
                meta:
                  os: ANDROID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /devices/remove/{token}:
    parameters:
      - name: token
        in: path
        schema:
          type: string
        required: true
        example: >-
          cVuYlI65SsKSH17MYEqFYi:APA91bHMxZef0CcL8oKVCRND1SONhaduVCGYOUGI8V9bwzhBzn8I3djhb0vpTmsB_zpLCcpJv8tLhV_Y6dUGNn1tUrQmuT5-MX3HjLOs7by119CeCtMvZEFleWs0881_jAIlOsZNJ80p
    post:
      tags:
        - device
      summary: remove token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /follows/{identity_id}:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - follows
      summary: follow
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /follows/{identity_id}/unfollow:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - follows
      summary: unfollow
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /follows/followings:
    get:
      tags:
        - follows
      summary: followings
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: c8765d15-030d-4ebc-a493-9265c0911f16
        - name: name
          in: query
          schema:
            type: string
          example: test
        - name: type
          in: query
          schema:
            type: string
          example: organizations
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /follows/followers:
    get:
      tags:
        - follows
      summary: followers
      security:
        - bearerAuth: []
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: c8765d15-030d-4ebc-a493-9265c0911f16
        - name: name
          in: query
          schema:
            type: string
          example: test
        - name: type
          in: query
          schema:
            type: string
          example: organizations
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /search:
    post:
      tags:
        - search
      summary: search
      description: >-
        filtering format would be like mongo objects with ('eq', 'ne', 'gt',
        'gte', 'lt', 'lte') for array columns only 'eq' would be available for
        clarify filters operator stand for (equal, not equal, greater, greater
        equal, little, little equal) as example we may not use any of them it
        wiyld be default equal operator. columns for each type would be projects
        = ['country', 'causes_tags', 'skills', 'payment_type', 'payment_scheme',
        'status'] posts = ['causes_tags', 'hashtags'] users,related_users =
        ['country', 'social_causes', 'skills'] organizations = ['country',
        'type', 'social_causes']
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              q: search q
              type: projects
              filter:
                causes_tags:
                  - SOCIAL
                status:
                  ne: ACTIVE
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /search/history:
    get:
      tags:
        - search
      summary: current user search history
      parameters:
        - name: Current-Identity
          in: header
          schema:
            type: string
          example: c8765d15-030d-4ebc-a493-9265c0911f16
        - name: limit
          in: query
          schema:
            type: number
          example: 100
        - name: page
          in: query
          schema:
            type: number
          example: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /media/upload:
    post:
      tags:
        - media
      summary: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /media/{media_id}:
    parameters:
      - name: media_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - media
      summary: get media
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - missions
      summary: get mission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/complete:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: complete job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/confirm:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: confirm job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/confirm/{work_id}:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
      - name: work_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: confirm job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/cancel:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: cancel job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/kickout:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: cancel job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/feedback:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: feedback job
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              content: test
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/submitworks:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: feedback job
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              total_hours: 5
              start_at: '2021-10-16T13:32:30.211Z'
              end_at: '2021-10-16T13:32:30.211Z'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /missions/{mission_id}/contest:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - missions
      summary: contest job
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notifications/{notif_id}:
    parameters:
      - name: notif_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - notifications
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notifications:
    get:
      tags:
        - notifications
      summary: all
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notifications/read/{notif_id}:
    parameters:
      - name: notif_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - notifications
      summary: read one
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notifications/read/all:
    post:
      tags:
        - notifications
      summary: read all
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /notifications/settings:
    get:
      tags:
        - notifications
      summary: get current user notification settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - notifications
      summary: update current user notification settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                settings:
                  - type: FOLLOWED
                    in_app: true
                    email: false
                    push: true
                  - type: APPLICATION
                    email: true
                    in_app: true
                    push: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /offers/{offer_id}:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
      - name: Current-Identity
        in: header
        schema:
          type: string
          example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
    get:
      tags:
        - offers
      summary: get offer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /offers/{offer_id}/withrawn:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - offers
      summary: withrawn offer from recepient
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /offers/{offer_id}/cancel:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
      - name: Current-Identity
        in: header
        schema:
          type: string
          example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
    post:
      tags:
        - offers
      summary: cancel offer from offerer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /offers/{offer_id}/approve:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - offers
      summary: approve offer from recepient
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /offers/{offer_id}/hire:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
      - name: Current-Identity
        in: header
        schema:
          type: string
          example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
    post:
      tags:
        - offers
      summary: offerer hire the recepient
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /geo/ip:
    get:
      tags:
        - geo
      summary: get location of IP address
      parameters:
        - name: ip
          in: query
          description: IP address to check. If ommitted, checks request (client) address.
          schema:
            type: string
          required: false
          examples:
            talinn:
              summary: Talinn
              value: 82.131.12.120
            tokyo:
              summary: Tokyo
              value: 91.234.192.9
            sao_paulo:
              summary: São Paulo
              value: 2.57.171.45
            new_york:
              summary: New York
              value: 157.254.225.113
            london:
              summary: London
              value: 185.192.70.165
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: location id for geoname API
                    example: 5128581
                  country:
                    type: string
                    description: ISO country code
                    example: US
                  region:
                    type: string
                    description: ISO 3166-2 or FIPS PUB 10-4 first-level region code
                    example: NY
                  city:
                    type: string
                    example: New York
                  eu:
                    type: boolean
                    description: true if the location is in the European Union
                    example: false
                  timezone:
                    type: string
                    description: IANA timezone
                    example: America/New_York
                  admin1_code:
                    type: string
                    description: first-level division ISO code
                    example: NY
                  admin1_id:
                    type: number
                    description: first-level division ID for geoname
                    example: 5128638
                  admin1_name:
                    type: string
                    description: first-level division name
                    example: New York
                  admin2_code:
                    type: string
                    description: second-level division ISO code where applicable
                    example: null
                  admin2_id:
                    type: number
                    description: second-level division ID for geoname where applicable
                    example: null
                  admin2_name:
                    type: string
                    description: second-level division name where applicable
                    example: null
  /geo/locations/country/{countryCode}:
    get:
      tags:
        - geo
      summary: get locations (cities, towns, etc) in country
      parameters:
        - name: countryCode
          in: path
          description: ISO (2-letter) country code
          schema:
            type: string
            maxLength: 2
            minLength: 2
          example: US
          required: true
        - name: search
          in: query
          required: false
          description: limit to locations matching this string
          schema:
            type: string
          example: apple
        - name: limit
          in: query
          schema:
            type: number
          example: 50
        - name: page
          in: query
          schema:
            type: number
          example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: number
                    example: 1
                  limit:
                    type: number
                    example: 50
                  total_count:
                    type: number
                    example: 18
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        type:
                          $ref: '#/components/schemas/location_type'
                        population:
                          type: number
                        country_code:
                          type: string
                        region_id:
                          type: string
                        region_name:
                          type: string
                        region_iso:
                          type: string
                        subregion_id:
                          type: string
                        subregion_name:
                          type: string
                        subregion_iso:
                          type: string
                        alternate_name:
                          type: string
                        alt_language:
                          type: string
                        is_historic:
                          type: boolean
                        is_colloquial:
                          type: boolean
                        is_short_name:
                          type: boolean
              example:
                page: 1
                limit: 50
                total_count: 2
                items:
                  - id: 5145894
                    name: Apple Creek
                    type: PPL
                    population: 1184
                    country_code: US
                    region_id: OH
                    subregion_id: 169
                    region_name: Ohio
                    region_iso: OH
                    subregion_name: null
                    subregion_iso: null
                  - id: 5128581
                    name: New York City
                    type: PPL
                    population: 8804190
                    country_code: US
                    alternate_name: The Big Apple
                    alt_language: en
                    is_historic: false
                    is_colloquial: true
                    is_short_name: false
                    region_id: NY
                    subregion_id: null
                    region_name: New York
                    region_iso: NY
                    subregion_name: null
                    subregion_iso: null
  /connections:
    get:
      tags:
        - connect
      summary: get connections
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/related/{identity_id}:
    parameters:
      - name: identity_id
        required: true
        in: path
        description: identity id
        schema:
          type: string
    get:
      tags:
        - connect
      summary: get related connect
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/{connect_id}:
    parameters:
      - name: connect_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - connect
      summary: get a connect obj
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/{identity_id}:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - connect
      summary: send connect request to an identity
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              text: please connect to me
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/{connect_id}/accept:
    parameters:
      - name: connect_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - connect
      summary: accept connect request
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/{connect_id}/block:
    parameters:
      - name: connect_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - connect
      summary: block connect request
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /connections/{identity_id}/block/direct:
    parameters:
      - name: identity_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - connect
      summary: block an identity
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments:
    get:
      tags:
        - payments
      summary: get transactions history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/cards:
    get:
      tags:
        - payments
      summary: get identities cards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - payments
      summary: add new card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                holder_name: test text
                numbers: '4242424242424242'
                exp_month: 11
                exp_year: 2023
                cvc: '314'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/cards/update/{card_id}:
    parameters:
      - name: card_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - payments
      summary: update card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                holder_name: test text
                numbers: '4242424242424242'
                exp_month: 11
                exp_year: 2023
                cvc: '314'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/cards/remove/{card_id}:
    parameters:
      - name: card_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - payments
      summary: remove card
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/cards/{card_id}:
    parameters:
      - name: card_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - payments
      summary: get a card
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/{payment_id}:
    parameters:
      - name: payment_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - payments
      summary: get a payment details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/donate:
    post:
      tags:
        - payments
      summary: donate
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                amount: 2000
                service: STRIPE
                source: <card_id>
                currency: USD
                description: test desc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/offers/{offer_id}:
    parameters:
      - name: offer_id
        in: path
        schema:
          type: string
        required: true
      - name: Current-Identity
        in: header
        schema:
          type: string
        example: ebd02a72-f530-4d18-9a72-d7aa9ace1271
    post:
      tags:
        - payments
      summary: pay offer escrow
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                amount: 2000
                service: STRIPE
                source: <card_id>
                currency: USD
                description: test desc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /payments/missions/{mission_id}/payout:
    parameters:
      - name: mission_id
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - payments
      summary: pay offer escrow
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /test-emails/{address}:
    parameters:
      - name: address
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - test
      summary: test email content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /test-emails/{address}/{id}:
    parameters:
      - name: address
        in: path
        schema:
          type: string
        required: true
      - name: id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - test
      summary: test email content
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
